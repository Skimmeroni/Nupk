#!/bin/sh -e

# The main dirs

NUPK_REPOSITORY="/var/db/nupk/repository"
NUPK_INSTALLED="/var/db/nupk/installed"
NUPK_BINARIES="/var/cache/nupk/binaries"
NUPK_WORKDIR="/var/tmp/nupk"

NUPK_X="[\033[31;1mX\033[0m]"
NUPK_O="[\033[32;1mO\033[0m]"
NUPK_E="[\033[33;1m!\033[0m]"

in_red() {
	printf "\033[31;1m$1\033[0m"
}

in_green() {
	printf "\033[32;1m$1\033[0m"
}

in_yellow() {
	printf "\033[33;1m$1\033[0m"
}

build() {
	# Create the working directory; if it exists already, delete it.
	# The directory is kept around only if the package failed to build,
	# so that it can be fixed by hand

	BUILDIR="$NUPK_WORKDIR/$1"

	printf "$NUPK_O Creating the temporary working directory...\n"
	if [ -d $BUILDIR ]
	then
		rm -rf $BUILDIR
	fi

	mkdir -p $BUILDIR
	cd $BUILDIR

	# Copy the main building script and all of the files
	# defined in 'sources' that are local to the machine

	printf "$NUPK_O Copying files...\n"
	cp -r "$NUPK_REPOSITORY/$1/*" .

	# Build the package

	printf "$NUPK_O Start!\n"
	./build

	# Finalize the process by moving the archive to
	# $NUPK_BINARIES and deleting all leftovers from
	# $NUPK_WORKDIR

	mv "$1@$VERSION.tar.gz" "$NUPK_BINARIES"
	rm -rf $BUILDIR
	printf "$NUPK_O Package %s built and saved in $NUPK_BINARIES\n" $(in_red $1)
}

install() {
	# Create a manifest file out of the package archive
	
	gzip -cd "$NUPK_BINARIES/$1@$VERSION.tar.gz" | tar -t | sort -r | sed 's|^|/|g' | awk '{print $1} END {print "/"}' > MANIFEST

	# A distinction between a fresh installation
	# and an upgrade ought to be established

	if [ -e "$NUPK_INSTALLED/$1" ]
	then
		FILES=$(diff "$NUPK_INSTALLED/$1/MANIFEST" MANIFEST | awk '/^>/{print $0}' | sed 's/^>\ //')
	else
		FILES=$(cat MANIFEST)
	fi

	# if there's a file (not a directory!) that already exists, bail out

	for i in $FILES
	do
		if [ -e $i ] && [ ! -d $i ]
		then
			printf "$NUPK_X File %s already exists!\n" $(in_red $i)
			exit 1
		fi
	done

	# If a package has to be updated, we remove all leftovers

	if [ -e "$NUPK_INSTALLED/$1" ]
	then
		diff "$NUPK_INSTALLED/$1/MANIFEST" MANIFEST | awk '/^</{print $0}' | sed 's/^<\ //' > LEFTOVERS
		for i in LEFTOVERS
		do
			if [ -f $i ]
			then
				rm $i
			elif [ -h $i ]
			then
				unlink $i
			elif [ $(ls -A $i | wc -l) -eq 0 ]
			then
				rmdir $i
			fi
		done
	fi

	# Copy all needed files from the repository and unpack the
	# archive. Files are changed from lowercase to uppercase as
	# a symbolic distinction

	if [ ! -d "$NUPK_INSTALLED/$1" ]
	then
		mkdir -p "$NUPK_INSTALLED/$1"
	fi

	mv MANIFEST "$NUPK_INSTALLED/$1/MANIFEST"
	cp "$NUPK_REPOSITORY/$1/data" "$NUPK_INSTALLED/$1/DATA"
	gzip -cd "$NUPK_BINARIES/$1@$V.tar.gz" | tar -x -C /

	printf "$NUPK_O Package %s installed\n" $(in_green $1)
}

remove() {
	# Remove all files one by one, unlinking symbolic
	# links and removing only empty directories

	for i in $(cat "$NUPK_INSTALLED/$1/MANIFEST")
	do
		if [ -f $i ]
		then
			rm $i
			printf "$NUPK_O File %s removed\n" $(in_green $i)
		elif [ -h $i ]
		then
			unlink $i
			printf "$NUPK_O Link %s removed\n" $(in_green $i)
		elif [ $(ls -A $i | wc -l) -eq 0 ]
		then
			rmdir $i
			printf "$NUPK_O Directory %s removed\n" $(in_green $i)
		else
			printf "$NUPK_E Directory %s left untouched\n" $(in_yellow $i)
		fi
	done

	# Delete leftover files

	rm -rf "$NUPK_INSTALLED/$1"

	printf "$NUPK_O Package %s removed\n" $(in_green $1)
}

validate() {
	# Check whether all files and/or directories reported in the manifest
	# of a package actually exist. At the first occurrence of a missing
	# file, report it and bail out

	for i in $(cat "$NUPK_INSTALLED/$1/MANIFEST")
	do
		if [ -h $i ]
		then
			printf "$NUPK_O Symbolic link %s exists\n" $(in_green $i)
		elif [ -d $i ]
		then
			printf "$NUPK_O Directory %s exists\n" $(in_green $i)
		elif [ -e $i ]
		then
			printf "$NUPK_O File %s exists\n" $(in_green $i)
		else
			printf "$NUPK_X File or directory %s does not exist!\n" $(in_red $i)
			exit 1
		fi
	done
}

### THE ACTUAL SCRIPT STARTS HERE ###

while getopts "b:i:r:v" op
do
	# Check whether the main directories exist
	# To be done: also check whether their permissions have been set properly

	for i in NUPK_REPOSITORY NUPK_INSTALLED NUPK_BINARIES NUPK_WORKDIR
	do
		D=$(eval 'printf ${'"$i"'}')
		if [ ! -e $D ]
		then
			printf "$NUPK_X Directory %s, set as %s, does not exist!\n" $(in_red $i) $(in_red $D)
			exit 1
		fi
	done

	# Check if the package exist

	if [ ! -e "$NUPK_REPOSITORY/$OPTARG" ]
	then
		printf "$NUPK_X Package %s does not exist!\n" $(in_red $OPTARG)
		exit 1
	fi

	# Check if the package is installed

	if [ $op = 'v' ] || [ $op = 'r' ]
	then
		if [ ! -e "$NUPK_INSTALLED/$OPTARG" ]
		then
			printf "$NUPK_X Package %s is not installed!\n" $(in_red $OPTARG)
			exit 1
		fi
	fi

	if [ $USER = "root" ]
	then
		if [ $op = 'b' ]
		then
			printf "$NUPK_X Only non-root users can perform this operation!\n"
			exit 1
		fi
	fi

	if [ $USER != "root" ]
	then
		if [ $op = 'i' ] || [ $op = 'r' ]
		then
			printf "$NUPK_X Only root can perform this operation!\n"
			exit 1
		fi
	fi

	case $op in
	b)
		build $OPTARG
		;;
	i)
		install $OPTARG
		;;
	r)
		remove $OPTARG
		;;
	v)
		validate $OPTARG
		;;
	esac
done

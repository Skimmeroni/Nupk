#!/bin/sh -e

# The main dirs

export NUPK_REPOSITORY="/var/db/nupk/repository/repository"
export NUPK_INSTALLED="/var/db/nupk/installed"
export NUPK_SOURCES="/var/cache/nupk/sources"
export NUPK_BINARIES="/var/cache/nupk/binaries"
export NUPK_WORKDIR="/var/tmp/nupk"

export NUPK_X="[\033[31;1mX\033[0m]"
export NUPK_O="[\033[32;1mO\033[0m]"
export NUPK_E="[\033[33;1m!\033[0m]"
export NUPK_W="[\033[34;1m?\033[0m]"

build() {
	# Call download

	download $1

	# Running as root is a terrible idea

	if [ $USER = "root" ]
	then
		printf "$NUPK_X building packages as root is not permitted\n"
		exit 1
	fi

	# Check that all dependencies are met, bail out at the first
	# occurrence otherwise

	printf "$NUPK_O Checking if all dependencies are met...\n"
	for i in $(< "$NUPK_REPOSITORY/$1/depends")
	do
		if [ ! -d "$NUPK_INSTALLED/$i" ]
		then
			printf "$NUPK_X Package \033[31;1m$1\033[0m requires \033[31;1m$i\033[0m!\n"
			exit 1
		fi
	done

	# Create the working directory; if it exists already, delete it.
	# The directory is kept around only if the package failed to build,
	# so that it can be fixed by hand

	printf "$NUPK_O Creating the temporary working directory...\n"
	if [ -d "$NUPK_WORKDIR/$1" ]
	then
		rm -rf "$NUPK_WORKDIR/$1"
	fi
	BUILDIR="$NUPK_WORKDIR/$1/NUPK_buildir"
	DESTDIR="$NUPK_WORKDIR/$1/NUPK_dump"
	mkdir -p $BUILDIR
	mkdir -p $DESTDIR
	cd $BUILDIR

	# Copy the main building script and all of the files
	# defined in 'sources' that are local to the machine

	printf "$NUPK_O Copying files...\n"
	cp "$NUPK_REPOSITORY/$1/build" NUPK_script.sh

	for i in $(cat "$NUPK_REPOSITORY/$1/sources")
	do
		RESOURCE="$NUPK_REPOSITORY/$1/$i"
		if [ -e $RESOURCE ]
		then
			cp $RESOURCE .
		fi
	done

	# Copy all files that have been downloaded
	# To be done: properly check which one are
	# needed instead of copying whatever (not
	# dangerous per se, just wasteful)

	if [ $(ls -A "$NUPK_SOURCES/$1" | wc -l) != 0 ]
	then
		cp -r "$NUPK_SOURCES/$1/"* .
	fi

	# Export DESTDIR and actually build the package

	export DESTDIR
	printf "$NUPK_O Start!\n"
	./NUPK_script.sh

	# Finalize the process by creating an archive out of the
	# build directory, moving it to $NUPK_BINARIES
	# and deleting all leftovers from $NUPK_WORKDIR

	printf "$NUPK_O Creating a suitable archive...\n"
	cd $DESTDIR
	tar -czf "$1@$VERSION.tar.gz" *
	mv "$1@$VERSION.tar.gz" "$NUPK_BINARIES"

	rm -rf "$NUPK_WORKDIR/$1"

	printf "$NUPK_O Package \033[32;1m$1\033[0m built\n"
}

install() {
	# Only root has permission to install packages

	if [ $USER != "root" ]
	then
		printf "$NUPK_X Installing packages as a regular user is not permitted\n"
		exit 1
	fi

	# Create a manifest file out of the package archive

	V=$(cat "$NUPK_REPOSITORY/$1/version")
	tar -tf "$NUPK_BINARIES/$1@$V.tar.gz" | sort -r | sed 's|^|/|g' > MANIFEST
	printf "/\n" >> MANIFEST

	# A distinction between a fresh installation
	# and an upgrade ought to be established

	if [ -e "$NUPK_INSTALLED/$1" ]
	then
		FILES=$(diff "$NUPK_INSTALLED/$1/MANIFEST" MANIFEST | awk '/^>/{print $0}' | sed 's/^>\ //')
	else
		FILES=$(cat MANIFEST)
	fi

	# if there's a file (not a directory!) that already exists, bail out

	for i in $FILES
	do
		if [ -e $i ] && [ ! -d $i ]
		then
			printf "$NUPK_X File \033[31;1m$i\033[0m already exists!\n"
			exit 1
		fi
	done

	# If a package has to be updated, we remove all leftovers

	if [ -e "$NUPK_INSTALLED/$1" ]
	then
		diff "$NUPK_INSTALLED/$1/MANIFEST" MANIFEST | awk '/^</{print $0}' | sed 's/^<\ //' > LEFTOVERS
		for i in LEFTOVERS
		do
			if [ -f $i ]
			then
				rm $i
			elif [ -h $i ]
			then
				unlink $i
			elif [ $(ls -A $i | wc -l) = 0 ]
			then
				rmdir $i
			fi
		done
	fi

	# Copy all needed files from the repository and unpack the
	# archive. Files are changed from lowercase to uppercase as
	# a symbolic distinction

	if [ ! -d "$NUPK_INSTALLED/$1" ]
	then
		mkdir -p "$NUPK_INSTALLED/$1"
	fi

	mv MANIFEST "$NUPK_INSTALLED/$1/MANIFEST"
	cp "$NUPK_REPOSITORY/$1/depends" "$NUPK_INSTALLED/$1/DEPENDS"
	cp "$NUPK_REPOSITORY/$1/info" "$NUPK_INSTALLED/$1/INFO"
	cp "$NUPK_REPOSITORY/$1/version" "$NUPK_INSTALLED/$1/VERSION"
	tar --no-same-owner -xf "$NUPK_BINARIES/$1@$V.tar.gz" -C /

	printf "$NUPK_O Package \033[32;1m$1\033[0m installed\n"
}

remove() {
	# Only root has permission to remove packages

	if [ $USER != "root" ]
	then
		printf "$NUPK_X Removing packages as a regular user is not permitted\n"
		exit 1
	fi

	# If the chosen package is a dependency, then is unremovable

	for i in $(ls "$NUPK_INSTALLED")
	do
		if [ ! -z $(grep -x $1 "$NUPK_INSTALLED/$i/DEPENDS") ]
		then
			printf "$NUPK_X Package \033[31;1m$1\033[0m is required by \033[31;1m$i\033[0m!\n"
			exit 1
		fi
	done

	# Remove all files one by one, unlinking symbolic
	# links and removing only empty directories

	for i in $(cat "$NUPK_INSTALLED/$1/MANIFEST")
	do
		if [ -f $i ]
		then
			rm $i
			printf "$NUPK_O File \033[32;1m$i\033[0m removed\n"
		elif [ -h $i ]
		then
			unlink $i
			printf "$NUPK_O Link \033[32;1m$i\033[0m removed\n"
		elif [ $(ls -A $i | wc -l) = 0 ]
		then
			rmdir $i
			printf "$NUPK_O Directory \033[32;1m$i\033[0m removed\n"
		else
			printf "$NUPK_E Directory \033[33;1m$i\033[0m left untouched\n"
		fi
	done

	# Delete leftover files

	rm -rf "$NUPK_INSTALLED/$1"

	printf "$NUPK_O Package \033[32;1m$1\033[0m removed\n"
}

validate() {
	# Check whether all files and/or directories reported in the manifest
	# of a package actually exist. At the first occurrence of a missing
	# file, report it and bail out

	for i in $(cat "$NUPK_INSTALLED/$1/MANIFEST")
	do
		if [ -d $i ]
		then
			printf "$NUPK_O Directory \033[32;1m$i\033[0m exists\n"
		elif [ -e $i ]
		then
			printf "$NUPK_O File \033[32;1m$i\033[0m exists\n"
		else
			printf "$NUPK_X File or directory \033[31;1m$i\033[0m does not exist!\n"
			exit 1
		fi
	done
}

download() {
	# Set all variables related to the package's version and export them,
	# so that they are available to the building script

	V="$NUPK_REPOSITORY/$1/version"
	export VERSION=$(cat $V)
	export MAJOR=$(awk -F '.' '{print $1}' $V)
	export MINOR=$(awk -F '.' '{print $2}' $V)
	export PATCH=$(awk -F '.' '{print $3}' $V)

	if [ ! -d "$NUPK_SOURCES/$1" ]
	then
		mkdir -p "$NUPK_SOURCES/$1"
	fi

	# This is a horrible hack

	SOURCES=$(sed "s/{{VERSION}}/$VERSION/g; s/{{MAJOR}}/$MAJOR/g; s/{{MINOR}}/$MINOR/g; s/{{PATCH}}/$PATCH/g" "$NUPK_REPOSITORY/$1/sources")

	# Fetch tarballs, git repos and alike from the web

	for r in $SOURCES
	do
		if [ ! -e "$NUPK_REPOSITORY/$1/$r" ]
		then
			if [ ${r##*.} = git ] || [ ${r::3} = git ]
			then
				printf "$NUPK_O Cloning \033[32;1m$r\033[0m from repository...\n"
				if [ -d "$NUPK_SOURCES/$1/$1.git" ]
				then
					cd "$NUPK_SOURCES/$1/$1.git"
					git pull
					cd $OLDPWD
				else
					git clone $r "$NUPK_SOURCES/$1/$1.git"
				fi
			else
				B=$(basename $r)
				printf "$NUPK_O Downloading \033[32;1m$B\033[0m...\n"
				if [ ! -e "$NUPK_SOURCES/$1/$B" ]
				then
					curl $r --output "$NUPK_SOURCES/$1/$B"
				else
					printf "$NUPK_W File \033[34;1m$B\033[0m downloaded already!\n"
				fi
			fi
		fi
	done

	printf "$NUPK_O Done!\n"
}

update() {
	# For each package in the repository, except from those cloned from a
	# git repo, grab its latest version using Repology's open APIs. Three
	# possibilities lie ahead:
	#
	# 1) Repology's version matches our own
	# 2) Repology's version is different from our own
	# 3) Repology has no information on that package

	for i in $(ls "$NUPK_REPOSITORY")
	do
		NAME=$(cat "$NUPK_REPOSITORY/$i/name")
		NEWVERSION=$(curl -s "https://repology.org/badge/latest-versions/$NAME.svg" |
					 awk '{ gsub(/>/, ">\n"); gsub(/</, "\n<"); gsub(/, /, ","); print }' |
					 awk -F ',' 'NR = 41 {print $NF}')
		OLDVERSION=$(cat "$NUPK_REPOSITORY/$i/version")

		if [ $OLDVERSION = "git" ]
		then
			printf "$NUPK_W \033[34;1m$i\033[0m was installed from git, skipping...\n"
		elif [ $NEWVERSION = "-" ]
		then
			printf "$NUPK_X \033[31;1m$i\033[0m not found on Repology!\n"
		elif [ $NEWVERSION != $OLDVERSION ]
		then
			printf "$NUPK_E \033[33;1m$i\033[0m does not match: "
			printf "you have \033[33;1m$OLDVERSION\033[0m but \033[33;1m$NEWVERSION\033[0m is available\n"
		else
			printf "$NUPK_O \033[32;1m$i\033[0m is up to date: version \033[32;1m$NEWVERSION\033[0m\n"
		fi
	done
}

### THE ACTUAL SCRIPT STARTS HERE ###

while getopts "d:b:i:r:v:u" op
do
	# Check whether the three main directories exist
	# To be done: also check whether their permissions have been set properly

	for i in NUPK_REPOSITORY NUPK_INSTALLED NUPK_BINARIES NUPK_SOURCES NUPK_WORKDIR
	do
		D=$(eval 'printf ${'"$i"'}')
		if [ ! -e $D ]
		then
			printf "$NUPK_X Directory \033[31;1m$i\033[0m, set as \033[31;1m$D\033[0m, does not exist!\n"
			exit 1
		fi
	done

	# Check if the package exist

	if [ ! -z $OPTARG ]
	then
		if [ ! -e "$NUPK_REPOSITORY/$OPTARG" ]
		then
			printf "$NUPK_X Package \033[31;1m$OPTARG\033[0m does not exist!\n"
			exit 1
		fi
	fi

	# Check if the package is installed

	if [ $op = 'v' ] || [ $op = 'r' ]
	then
		if [ ! -e "$NUPK_INSTALLED/$OPTARG" ]
		then
			printf "$NUPK_X Package \033[31;1m$OPTARG\033[0m is not installed!\n"
			exit 1
		fi
	fi

	case $op in
	d)
		download $OPTARG
		;;
	b)
		build $OPTARG
		;;
	i)
		install $OPTARG
		;;
	r)
		remove $OPTARG
		;;
	v)
		validate $OPTARG
		;;
	u)
		update
		;;
	esac
done
